package com.example.demo.services;


import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
:importEntity:
:importRepository:
import lombok.extern.slf4j.Slf4j;

@Service
public class :serviceName: {

  @Autowired
  :repositoryName:

  public :typeResponse findAll() {
    log.debug("Find all");
    return this.:repositoryName.findAll();
  }

  public :entityType: findById(Integer id){
    log.debug("Find by Id");
    Optional<:entityType:> op:entityType: = this.:repositoryName:.findById(id);
    return op:entityType:.orElseThrow(() -> new RuntimeException("Not found"));
  }

  public :entityType: save(:entityType: :entityTypeParam:){
    log.debug("Save");
    try {
      return this.:repositoryName:.save(:entityTypeParam:);
    } catch (IllegalArgumentException e) {
      log.error(MessageFormat.format("Error produced while saving the information: {0}",e.getMessage()));
      throw e;
    }
  }

  public :entityType: update(Integer id, :entityType: :entityTypeParam:) throws  RuntimeException, IllegalArgumentException {
    :entityType: :entityName: = this.findById(id);
    :entityTypeParam:.setId(id);
    return this.save(:entityTypeParam:);
  }

  public void delete(Integer id){
    log.debug("Update");
    :entityType: :entityName: = this.findById(id);
    this.:repositoryName:.delete(userEntity);
  }

}
